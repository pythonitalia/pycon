# Generated by Django 5.1.4 on 2025-11-01 15:07

import django.db.models.deletion
from django.db import migrations, models


def ensure_categories_exist(apps, schema_editor):
    """Ensure reimbursement categories exist for all conferences."""
    Conference = apps.get_model("conferences", "Conference")
    GrantReimbursementCategory = apps.get_model("grants", "GrantReimbursementCategory")

    for conference in Conference.objects.all():
        GrantReimbursementCategory.objects.get_or_create(
            conference=conference,
            category="ticket",
            defaults={
                "name": "Ticket",
                "description": "Conference ticket",
                "max_amount": conference.grants_default_ticket_amount
                or Decimal("0.00"),
                "included_by_default": True,
            },
        )
        GrantReimbursementCategory.objects.get_or_create(
            conference=conference,
            category="travel",
            defaults={
                "name": "Travel",
                "description": "Travel support",
                "max_amount": conference.grants_default_travel_from_extra_eu_amount
                or Decimal("400.00"),
                "included_by_default": False,
            },
        )
        GrantReimbursementCategory.objects.get_or_create(
            conference=conference,
            category="accommodation",
            defaults={
                "name": "Accommodation",
                "description": "Accommodation support",
                "max_amount": conference.grants_default_accommodation_amount
                or Decimal("300.00"),
                "included_by_default": True,
            },
        )


def migrate_grants(apps, schema_editor):
    """Migrate existing grants to use the new reimbursement system."""
    Grant = apps.get_model("grants", "Grant")
    GrantReimbursement = apps.get_model("grants", "GrantReimbursement")
    GrantReimbursementCategory = apps.get_model("grants", "GrantReimbursementCategory")

    grants = Grant.objects.filter(approved_type__isnull=False).exclude(approved_type="")

    for grant in grants:
        categories = {
            c.category: c
            for c in GrantReimbursementCategory.objects.filter(
                conference_id=grant.conference_id
            )
        }

        def add_reimbursement(category_key, amount):
            if category_key in categories and amount:
                GrantReimbursement.objects.get_or_create(
                    grant=grant,
                    category=categories[category_key],
                    defaults={"granted_amount": amount},
                )

        # Always add ticket reimbursement
        add_reimbursement("ticket", grant.ticket_amount)

        # Add travel reimbursement if approved
        if grant.approved_type in ("ticket_travel", "ticket_travel_accommodation"):
            add_reimbursement("travel", grant.travel_amount)

        # Add accommodation reimbursement if approved
        if grant.approved_type in (
            "ticket_accommodation",
            "ticket_travel_accommodation",
        ):
            add_reimbursement("accommodation", grant.accommodation_amount)


def reverse_migration(apps, schema_editor):
    """Reverse the migration by deleting all reimbursements."""
    GrantReimbursement = apps.get_model("grants", "GrantReimbursement")
    GrantReimbursement.objects.all().delete()



class Migration(migrations.Migration):

    dependencies = [
        ('conferences', '0055_remove_conference_grants_default_accommodation_amount_and_more'),
        ('grants', '0029_alter_grant_pending_status'),
    ]

    operations = [
        # Create reimbursement tables
        migrations.CreateModel(
            name='GrantReimbursementCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('max_amount', models.DecimalField(decimal_places=0, help_text='Maximum amount for this category', max_digits=6)),
                ('category', models.CharField(choices=[('travel', 'Travel'), ('ticket', 'Ticket'), ('accommodation', 'Accommodation'), ('other', 'Other')], max_length=20)),
                ('included_by_default', models.BooleanField(default=False, help_text='Automatically include this category in grants by default')),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reimbursement_categories', to='conferences.conference')),
            ],
            options={
                'verbose_name': 'Grant Reimbursement Category',
                'verbose_name_plural': 'Grant Reimbursement Categories',
                'ordering': ['conference', 'category'],
                'unique_together': {('conference', 'category')},
            },
        ),
        migrations.CreateModel(
            name='GrantReimbursement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('granted_amount', models.DecimalField(decimal_places=0, help_text='Actual amount granted for this category', max_digits=6, verbose_name='granted amount')),
                ('grant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reimbursements', to='grants.grant', verbose_name='grant')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='grants.grantreimbursementcategory', verbose_name='reimbursement category')),
            ],
            options={
                'verbose_name': 'Grant Reimbursement',
                'verbose_name_plural': 'Grant Reimbursements',
                'ordering': ['grant', 'category'],
                'unique_together': {('grant', 'category')},
            },
        ),
        # Backfill existing grants
        migrations.RunPython(
            code=migrate_grants,
            reverse_code=reverse_migration,
        ),
        # Finally, remove old fields
        migrations.RemoveField(
            model_name='grant',
            name='accommodation_amount',
        ),
        migrations.RemoveField(
            model_name='grant',
            name='approved_type',
        ),
        migrations.RemoveField(
            model_name='grant',
            name='ticket_amount',
        ),
        migrations.RemoveField(
            model_name='grant',
            name='total_amount',
        ),
        migrations.RemoveField(
            model_name='grant',
            name='travel_amount',
        ),
        migrations.AddField(
            model_name='grant',
            name='reimbursement_categories',
            field=models.ManyToManyField(related_name='grants', through='grants.GrantReimbursement', to='grants.grantreimbursementcategory'),
        ),
    ]
