x-defaults:
  environment: &enviroment_defaults
    DEBUG: "True"
    NODE_ENV: "development"
    ENV: "local"
    CONFERENCE_CODE: ${CONFERENCE_CODE:-pycon2023}
    PRETIX_API: https://tickets.pycon.it/api/v1/
    PRETIX_API_TOKEN: None # ask for a token
    SECRET_KEY: secret-key
    API_URL: /graphql
    API_URL_SERVER: http://pycon-backend:8000/graphql
    # Stripe
    STRIPE_SUBSCRIPTION_PRICE_ID: price_1IkVzxD5MZ3GejSORRBZCvK6
    # URLs
    ASSOCIATION_FRONTEND_URL: http://localhost:3020
    # Services URLs
    TEMPORAL_ADDRESS: temporal:7233
    # stripe
    STRIPE_SECRET_API_KEY: ${STRIPE_SECRET_API_KEY}
    STRIPE_WEBHOOK_SIGNATURE_SECRET: ${STRIPE_WEBHOOK_SIGNATURE_SECRET}
    PRETIX_WEBHOOK_SECRET: "secret"
  pycon_backend_envs: &pycon_backend_envs
    <<: *enviroment_defaults
    CACHE_URL: redis://redis:6379/0
    DATABASE_URL: psql://pycon:pycon@pycon-backend-db/pycon
    DJANGO_SETTINGS_MODULE: pycon.settings.dev
    ALLOWED_HOSTS: "*"
    PRETIX_API_TOKEN: ${PRETIX_API_TOKEN}
    MAILCHIMP_SECRET_KEY: ${MAILCHIMP_SECRET_KEY}
    MAILCHIMP_DC: ${MAILCHIMP_DC}
    MAILCHIMP_LIST_ID: ${MAILCHIMP_LIST_ID}
    AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}
    AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET}
    AZURE_TENANT_ID: ${AZURE_TENANT_ID}
    AZURE_STORAGE_ACCOUNT_NAME: ${AZURE_STORAGE_ACCOUNT_NAME}
    AZURE_STORAGE_ACCOUNT_KEY: ${AZURE_STORAGE_ACCOUNT_KEY}
    MEDIA_FILES_STORAGE_BACKEND: ${MEDIA_FILES_STORAGE_BACKEND}
    OAUTHLIB_INSECURE_TRANSPORT: ${OAUTHLIB_INSECURE_TRANSPORT}
    DEEPL_AUTH_KEY: ${DEEPL_AUTH_KEY:-}

services:
  pycon-backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.python.local
    networks: [pycon_net]
    entrypoint: ""
    command: sh -c "pdm install &&
      pdm run python manage.py migrate &&
      pdm run python manage.py create_admin &&
      touch /.ready &&
      pdm run python manage.py runserver 0.0.0.0:8000"
    depends_on:
      redis:
        condition: service_healthy
      pycon-backend-db:
        condition: service_healthy
    tty: true
    stdin_open: true
    ports:
      - 8000:8000
    volumes:
      - ./backend:/home/app/
    environment:
      <<: *pycon_backend_envs
    healthcheck:
      test: ["CMD-SHELL", "test -f /.ready"]
      interval: 10s
      timeout: 10s
      retries: 10

  pycon-backend-worker:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.python.local
    networks: [pycon_net]
    entrypoint: ""
    command: sh -c "touch /.ready && pdm install && pdm run python worker.py"
    depends_on:
      redis:
        condition: service_healthy
      pycon-backend-db:
        condition: service_healthy
    tty: true
    stdin_open: true
    volumes:
      - ./backend:/home/app/
    environment:
      <<: *pycon_backend_envs
    healthcheck:
      test: ["CMD-SHELL", "test -f /.ready"]
      interval: 10s
      timeout: 10s
      retries: 10

  pycon-backend-db:
    image: postgres:14.5
    networks: [pycon_net]
    ports:
      - "15501:5432"
    volumes:
      - pycon-backend-db-data:/var/lib/postgresql/data
      - ./db-superuser.sql:/docker-entrypoint-initdb.d/db-superuser.sql
    environment:
      POSTGRES_USER: pycon
      POSTGRES_PASSWORD: pycon
      POSTGRES_DB: pycon
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pycon"]
      interval: 5s
      timeout: 5s

  pycon-frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.node.local
    networks: [pycon_net]
    entrypoint: ""
    working_dir: /home/node/app
    command: sh -c "pnpm install && pnpm codegen && pnpm run dev"
    volumes:
      - ./frontend/:/home/node/app
      - /home/node/app/.pnpm-store/
      - /home/node/app/node_modules/
      - /home/node/app/.next
    environment:
      <<: *enviroment_defaults
    tty: true
    stdin_open: true
    ports:
      - 3000:3000
    depends_on:
      pycon-backend:
        condition: service_healthy

  email-templates:
    build:
      context: ./email-templates
      dockerfile: ../Dockerfile.node.local
    command: sh -c "pnpm install && pnpm run dev"
    ports:
      - 3500:3500
      - 3501:3501
    volumes:
      - ./email-templates/:/home/node/app
      - /home/node/app/node_modules/

  redis:
    image: redis:6
    networks: [pycon_net]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  temporal-db:
    image: postgres:14.5
    networks: [pycon_net]
    volumes:
      - temporal-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 5s
      timeout: 5s

  temporal:
    image: temporalio/auto-setup:${TEMPORAL_VERSION:-1.21.2.0}
    networks: [pycon_net]
    depends_on:
      temporal-db:
        condition: service_healthy
    environment:
      - DB=postgres
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-db
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yml
    volumes:
      - ./temporal-config:/etc/temporal/config/dynamicconfig

  temporal-admin-tools:
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION:-1.21.2.0}
    networks: [pycon_net]
    stdin_open: true
    tty: true

  temporal-ui:
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION:-2.16.2}
    networks: [pycon_net]
    ports:
      - 8969:8080

networks:
  pycon_net:

volumes:
  pycon-backend-db-data:
  temporal-db-data:
