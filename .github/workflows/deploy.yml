name: Deploy

on:
  push:
    branches:
      - master

env:
  TF_WORKSPACE: "production"

jobs:
  build-and-push-backend:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@master
      - name: Docker login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build the Docker image
        working-directory: backend
        run: docker build . --file Dockerfile --tag pythonitalia/pycon-backend:latest
      - name: Publish the image
        working-directory: backend
        run: docker push pythonitalia/pycon-backend:latest

  build-lambda-backend:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@master
      - name: Docker login
        run: aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build the Docker image
        working-directory: backend
        run: docker build . --file Dockerfile.lambda --tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/production-pycon-backend:latest
      - name: Publish the image
        working-directory: backend
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/production-pycon-backend:latest

  terraform:
    runs-on: ubuntu-20.04
    needs: [build-lambda-backend]
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - uses: actions/checkout@master
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.3
      - name: Terraform Init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform apply
        run: terraform apply -no-color -auto-approve
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_database_password: ${{ secrets.TF_VAR_database_password }}
          TF_VAR_secret_key: ${{ secrets.TF_VAR_secret_key }}
          TF_VAR_ssl_certificate: ${{ secrets.TF_VAR_ssl_certificate }}
          TF_VAR_mapbox_public_api_key: ${{ secrets.TF_VAR_mapbox_public_api_key }}
          TF_VAR_sentry_dsn: ${{ secrets.TF_VAR_sentry_dsn }}
          TF_VAR_slack_incoming_webhook_url: ${{ secrets.TF_VAR_slack_incoming_webhook_url }}
          TF_VAR_social_auth_google_oauth2_key: ${{ secrets.TF_VAR_social_auth_google_oauth2_key }}
          TF_VAR_social_auth_google_oauth2_secret: ${{ secrets.TF_VAR_social_auth_google_oauth2_secret }}
          TF_VAR_mail_user: ${{ secrets.TF_VAR_mail_user }}
          TF_VAR_mail_password: ${{ secrets.TF_VAR_mail_password }}
          TF_VAR_pretix_secret_key: ${{ secrets.TF_VAR_pretix_secret_key }}
          TF_VAR_pretix_api_token: ${{ secrets.TF_VAR_pretix_api_token }}
          TF_VAR_pinpoint_application_id: ${{ secrets.TF_VAR_pinpoint_application_id }}

  deploy-to-eb:
    runs-on: ubuntu-20.04
    needs: [terraform, build-and-push-backend]

    steps:
      - uses: actions/checkout@master

      - name: eb deploy
        uses: ./.github/eb-action
        with:
          env: backend
          args: deploy production-env --region eu-central-1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  migrate-db:
    runs-on: ubuntu-20.04
    needs: [terraform]
    steps:
      - uses: actions/checkout@master
      - name: Migrate DB
        run: 'aws lambda invoke --function-name production-pycon-backend --cli-binary-format raw-in-base64-out --payload ''{ "_serverless-wsgi": { "command": "manage", "data": "migrate" } }'''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
