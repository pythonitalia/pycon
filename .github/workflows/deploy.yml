name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      comment-id:
        description: 'The comment-id of the slash command'
        required: true
      event-number:
        description: 'The event-id of the slash command'
        required: true

env:
  TF_WORKSPACE:  ${{ fromJSON('["pastaporto", "production"]')[github.ref == 'refs/heads/main'] }}
  APOLLO_ROVER_VERSION: 0.1.9
  RUSH_VERSION: 0.4.2

jobs:
  changed-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          token: ${{ github.token }}
          filters: |
            gateway:
              - "gateway/**"
            association-backend:
              - "association-backend/**"
            pycon-backend:
              - backend/**"
            users-backend:
              - users-backend/**"

  build-and-push-service:
    runs-on: ubuntu-latest
    needs: [changed-services]

    strategy:
      matrix:
        service:
          - name: gateway
            dir: gateway
          - name: users-backend
            dir: users-backend
          - name: association-backend
            dir: association-backend
          - name: pycon-backend
            dir: backend

    steps:
      - uses: actions/checkout@v2
        if: ${{ contains(fromJSON(needs.changed-services.outputs.services), matrix.service.name) }}
        with:
          ref: ${{ github.ref }}
      - name: Docker login
        if: ${{ contains(fromJSON(needs.changed-services.outputs.services), matrix.service.name) }}
        run: aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Set up Docker Buildx
        if: ${{ contains(fromJSON(needs.changed-services.outputs.services), matrix.service.name) }}
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        if: ${{ contains(fromJSON(needs.changed-services.outputs.services), matrix.service.name) }}
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.service.name }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-buildx-${{ github.sha }}
      - name: Build and push
        if: ${{ contains(fromJSON(needs.changed-services.outputs.services), matrix.service.name) }}
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.service.dir }}
          file: ./${{ matrix.service.dir }}/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/pythonit/${{ matrix.service.name }}:${{ env.TF_WORKSPACE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build-emails:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./email-templates/
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Install dependencies
        run: yarn install
      - name: Build templates
        run: yarn production
      - uses: actions/upload-artifact@v2
        with:
          name: built-email-templates
          path: email-templates/build_production

  create-graph-schemas:
    runs-on: ubuntu-latest
    needs: [changed-services]
    if: ${{ needs.changed-services.outputs.services != '[]' && needs.changed-services.outputs.services != '' }}
    services:
      postgres:
        image: postgres:11.10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 2s --health-timeout 2s --health-retries 5
    outputs:
      default-pycon-backend-schema: ${{ steps.default-pycon-backend-schema.outputs.schema-path }}
      default-users-backend-schema: ${{ steps.default-users-backend-schema.outputs.schema-path }}
      default-association-backend-schema: ${{ steps.default-association-backend-schema.outputs.schema-path }}
      admin-users-backend-schema: ${{ steps.admin-users-backend-schema.outputs.schema-path }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9.5"
      - name: Cache Rover
        uses: actions/cache@v1
        id: cache-rover
        with:
          path: ~/.rover/bin
          key: rover-cache-${{ env.APOLLO_ROVER_VERSION }}
      - name: Install apollo rover
        if: steps.cache-rover.outputs.cache-hit != 'true'
        run: curl -sSL https://rover.apollo.dev/nix/v$APOLLO_ROVER_VERSION | sh
      - name: Append rover to path
        run: echo "$HOME/.rover/bin" >> $GITHUB_PATH
      - name: Cache Rush
        uses: actions/cache@v1
        id: cache-rush
        with:
          path: ~/rush-bin/
          key: rush-cache-${{ env.RUSH_VERSION }}
      - name: Install rush
        if: steps.cache-rush.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/shenwei356/rush/releases/download/v$RUSH_VERSION/rush_linux_amd64.tar.gz
          tar -zxvf rush_linux_amd64.tar.gz
          mkdir -p $HOME/rush-bin/
          cp rush $HOME/rush-bin/
      - name: Append rush to path
        run: echo "$HOME/rush-bin" >> $GITHUB_PATH
      - name: Install poetry
        run: pip install poetry
      - name: Cache deps
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.cache/pypoetry/virtualenvs/
          key: services-cache-${{ hashFiles('**/poetry.lock') }}-v3
      - name: Start all services
        uses: ./.github/actions/start-services
        id: services
        with:
          postgres-port: ${{ job.services.postgres.ports['5432'] }}
      - name: Prepare directory
        run: mkdir -p ./schemas

      - name: Generate PyCon Backend schema
        id: default-pycon-backend-schema
        uses: ./.github/actions/generate-graphql-schema
        with:
          service-name: users-backend
          schema-graphql-url: ${{ steps.services.outputs.pycon-backend-url }}/graphql

      - name: Generate Association Backend schema
        id: default-association-backend-schema
        uses: ./.github/actions/generate-graphql-schema
        with:
          service-name: association-backend
          schema-graphql-url: ${{ steps.services.outputs.association-backend-url }}/graphql

      - name: Generate Users Backend schema
        id: default-users-backend-schema
        uses: ./.github/actions/generate-graphql-schema
        with:
          service-name: pycon-backend
          schema-graphql-url: ${{ steps.services.outputs.users-backend-url }}/graphql

      # Admin graph
      - name: Generate Users Backend admin schema
        id: admin-users-backend-schema
        uses: ./.github/actions/generate-graphql-schema
        with:
          service-name: users-backend
          variant: admin
          schema-graphql-url: ${{ steps.services.outputs.users-backend-url }}/admin-api

      - name: Upload graphql files
        uses: actions/upload-artifact@v2
        with:
          name: graphql-files
          path: ./schemas

  # Apply infrastructure changes
  terraform:
    runs-on: ubuntu-latest
    needs: [build-emails, build-and-push-service]
    environment:
      name: ${{ fromJSON('["pastaporto", "production"]')[github.ref == 'refs/heads/main'] }}
    defaults:
      run:
        working-directory: ./infrastructure/applications
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - uses: actions/download-artifact@v2
        with:
          name: built-email-templates
          path: email-templates/build_production
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.4
      - name: Terraform Init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform apply
        run: terraform apply -no-color -auto-approve &> /dev/null
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1

  # Migrate the database
  migrate-pycon-backend-db:
    runs-on: ubuntu-latest
    needs: [terraform, changed-services]
    if: contains(fromJSON(needs.changed-services.outputs.services), 'pycon-backend')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Migrate PyCon Backend DB
        run: |
          aws lambda invoke --function-name ${{ env.TF_WORKSPACE }}-pycon-backend --cli-binary-format raw-in-base64-out --payload '{ "_serverless-wsgi": { "command": "manage", "data": "migrate" } }' response.json
          cat response.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  migrate-users-backend-db:
    runs-on: ubuntu-latest
    needs: [terraform, changed-services]
    if: contains(fromJSON(needs.changed-services.outputs.services), 'users-backend')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Migrate Users Backend DB
        run: |
          aws lambda invoke --function-name ${{ env.TF_WORKSPACE }}-users-backend --cli-binary-format raw-in-base64-out --payload '{ "_cli_command": { "action": "migrate" } }' response.json
          cat response.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  migrate-association-backend-db:
    runs-on: ubuntu-latest
    needs: [terraform, changed-services]
    if: contains(fromJSON(needs.changed-services.outputs.services), 'association-backend')
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Migrate Association Backend DB
        run: |
          aws lambda invoke --function-name ${{ env.TF_WORKSPACE }}-association-backend --cli-binary-format raw-in-base64-out --payload '{ "_cli_command": { "action": "migrate" } }' response.json
          cat response.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  # Upload new schemas to Apollo Studio
  update-default-apollo-studio-graph:
    runs-on: ubuntu-latest
    needs: [create-graph-schemas, terraform, changed-services]
    if: ${{ needs.changed-services.outputs.services != '[]' && needs.changed-services.outputs.services != '' }}
    environment:
      name: ${{ fromJSON('["pastaporto", "production"]')[github.ref == 'refs/heads/main'] }}

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: users-backend
            path: ${{ needs.create-graph-schemas.outputs.default-users-backend-schema }}
            url: https://${{ fromJSON('["pastaporto-", ""]')[github.ref == 'refs/heads/main'] }}users-api.python.it/graphql
          - name: association-backend
            path: ${{ needs.create-graph-schemas.outputs.default-association-backend-schema }}
            url: https://${{ fromJSON('["pastaporto-", ""]')[github.ref == 'refs/heads/main'] }}association-api.python.it/graphql
          - name: pycon-backend
            path: ${{ needs.create-graph-schemas.outputs.default-pycon-backend-schema }}
            url: https://${{ fromJSON('["pastaporto-", ""]')[github.ref == 'refs/heads/main'] }}admin.pycon.it/graphql
          - name: logout
            path: ./gateway/internal-services/logout/schema.graphql
            url: https://logout

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - uses: actions/download-artifact@v2
        with:
          name: graphql-files
          path: ./schemas/
      - name: Cache Apollo Rover
        uses: actions/cache@v1
        id: cache-rover
        with:
          path: ~/.rover/bin
          key: rover-cache-${{ env.APOLLO_ROVER_VERSION }}
      - name: Install Apollo Rover
        if: steps.cache-rover.outputs.cache-hit != 'true'
        run: curl -sSL https://rover.apollo.dev/nix/v$APOLLO_ROVER_VERSION | sh
      - name: Append Apollo Rover to path
        run: echo "$HOME/.rover/bin" >> $GITHUB_PATH
      - name: Publish schema
        uses: ./.github/actions/publish-graph-schema
        with:
          service-name: ${{ matrix.service.name }}
          schema-path: ${{ matrix.service.path }}
          service-graphql-url: ${{ matrix.service.url }}
          apollo-key: ${{ secrets.DEFAULT_APOLLO_KEY }}
          graph: default-python-italia
          variant: ${{ env.TF_WORKSPACE }}

  update-admin-apollo-studio-graph:
    runs-on: ubuntu-latest
    needs: [create-graph-schemas, terraform, changed-services]
    if: ${{ needs.changed-services.outputs.services != '[]' && needs.changed-services.outputs.services != '' }}
    environment:
      name: ${{ fromJSON('["pastaporto", "production"]')[github.ref == 'refs/heads/main'] }}

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: users-backend
            path: ${{ needs.create-graph-schemas.outputs.admin-users-backend-schema }}
            url: https://${{ fromJSON('["pastaporto-", ""]')[github.ref == 'refs/heads/main'] }}users-api.python.it/admin-api
          - name: logout
            path: ./gateway/internal-services/logout/schema.graphql
            url: https://logout

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - uses: actions/download-artifact@v2
        with:
          name: graphql-files
          path: ./schemas/
      - name: Cache Apollo Rover
        uses: actions/cache@v1
        id: cache-rover
        with:
          path: ~/.rover/bin
          key: rover-cache-${{ env.APOLLO_ROVER_VERSION }}
      - name: Install Apollo Rover
        if: steps.cache-rover.outputs.cache-hit != 'true'
        run: curl -sSL https://rover.apollo.dev/nix/v$APOLLO_ROVER_VERSION | sh
      - name: Append Apollo Rover to path
        run: echo "$HOME/.rover/bin" >> $GITHUB_PATH
      - name: Publish schema
        uses: ./.github/actions/publish-graph-schema
        with:
          service-name: ${{ matrix.service.name }}
          schema-path: ${{ matrix.service.path }}
          service-graphql-url: ${{ matrix.service.url }}
          apollo-key: ${{ secrets.ADMIN_APOLLO_KEY }}
          graph: admin-python-italia
          variant: ${{ env.TF_WORKSPACE }}
